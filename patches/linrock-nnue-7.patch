diff --git a/src/evaluate.cpp b/src/evaluate.cpp
index 7f0ea4bc..d0a01bc1 100644
--- a/src/evaluate.cpp
+++ b/src/evaluate.cpp
@@ -68,6 +68,8 @@ namespace Eval {
 
   void NNUE::init() {
 
+    return;
+
     string eval_file = string(Options["EvalFile"]);
     if (eval_file.empty())
         eval_file = EvalFileDefaultName;
@@ -108,6 +110,7 @@ namespace Eval {
 
   /// NNUE::verify() verifies that the last net used was loaded successfully
   void NNUE::verify() {
+    return; // looks good to me
 
     string eval_file = string(Options["EvalFile"]);
     if (eval_file.empty())
diff --git a/src/main.cpp b/src/main.cpp
index 593408f6..f4dc7e3d 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -33,7 +33,6 @@ int main(int argc, char* argv[]) {
 
   std::cout << engine_info() << std::endl;
 
-  CommandLine::init(argc, argv);
   UCI::init(Options);
   Tune::init();
   PSQT::init();
diff --git a/src/misc.cpp b/src/misc.cpp
index f1554060..bbfa4061 100644
--- a/src/misc.cpp
+++ b/src/misc.cpp
@@ -73,7 +73,7 @@ namespace Stockfish {
 namespace {
 
 /// Version number or dev.
-constexpr string_view version = "dev";
+constexpr string_view version = "16";
 
 /// Our fancy logging facility. The trick here is to replace cin.rdbuf() and
 /// cout.rdbuf() with two Tie objects that tie cin and cout to a file stream. We
diff --git a/src/nnue/nnue_feature_transformer.h b/src/nnue/nnue_feature_transformer.h
index 7571f398..1f5bc32b 100644
--- a/src/nnue/nnue_feature_transformer.h
+++ b/src/nnue/nnue_feature_transformer.h
@@ -33,10 +33,7 @@ namespace Stockfish::Eval::NNUE {
   using WeightType     = std::int16_t;
   using PSQTWeightType = std::int32_t;
 
-  // If vector instructions are enabled, we update and refresh the
-  // accumulator tile by tile such that each tile fits in the CPU's
-  // vector registers.
-  #define VECTOR
+  // For WASM, let clang auto-vectorize
 
   static_assert(PSQTBuckets % 8 == 0,
     "Per feature PSQT values cannot be processed at granularity lower than 8 at a time.");
diff --git a/src/search.cpp b/src/search.cpp
index 61c75d7d..c8bc88f9 100644
--- a/src/search.cpp
+++ b/src/search.cpp
@@ -1945,6 +1945,9 @@ bool RootMove::extract_ponder_from_tt(Position& pos) {
 void Tablebases::rank_root_moves(Position& pos, Search::RootMoves& rootMoves) {
 
     RootInTB = false;
+    Cardinality = 0;
+    return;
+
     UseRule50 = bool(Options["Syzygy50MoveRule"]);
     ProbeDepth = int(Options["SyzygyProbeDepth"]);
     Cardinality = int(Options["SyzygyProbeLimit"]);
diff --git a/src/tt.cpp b/src/tt.cpp
index 3339c993..198ee255 100644
--- a/src/tt.cpp
+++ b/src/tt.cpp
@@ -85,6 +85,10 @@ void TranspositionTable::resize(size_t mbSize) {
 
 void TranspositionTable::clear() {
 
+  std::memset(table, 0, clusterCount * sizeof(Cluster));
+  // no new threads for wasm, otherwise terrible things.
+  return;
+
   std::vector<std::thread> threads;
 
   for (size_t idx = 0; idx < size_t(Options["Threads"]); ++idx)
diff --git a/src/uci.cpp b/src/uci.cpp
index f893bd9c..561ae463 100644
--- a/src/uci.cpp
+++ b/src/uci.cpp
@@ -36,6 +36,8 @@
 
 using namespace std;
 
+std::string js_getline(); // wasm/glue.cpp
+
 namespace Stockfish {
 
 namespace {
@@ -244,9 +246,7 @@ void UCI::loop(int argc, char* argv[]) {
       cmd += std::string(argv[i]) + " ";
 
   do {
-      if (argc == 1 && !getline(cin, cmd)) // Wait for an input or an end-of-file (EOF) indication
-          cmd = "quit";
-
+      cmd = js_getline();
       istringstream is(cmd);
 
       token.clear(); // Avoid a stale if getline() returns nothing or a blank line
@@ -299,7 +299,7 @@ void UCI::loop(int argc, char* argv[]) {
       else if (!token.empty() && token[0] != '#')
           sync_cout << "Unknown command: '" << cmd << "'. Type help for more information." << sync_endl;
 
-  } while (token != "quit" && argc == 1); // The command-line arguments are one-shot
+  } while (token != "quit");
 }
 
 
