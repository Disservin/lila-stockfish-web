diff --git a/src/evaluate.cpp b/src/evaluate.cpp
index f22c0d06..5207d8ed 100644
--- a/src/evaluate.cpp
+++ b/src/evaluate.cpp
@@ -142,6 +142,7 @@ NNUE::EvalFiles NNUE::load_networks(const std::string& rootDirectory,
 // Verifies that the last net used was loaded successfully
 void NNUE::verify(const OptionsMap&                                        options,
                   const std::unordered_map<Eval::NNUE::NetSize, EvalFile>& evalFiles) {
+    return; // looks good to me
 
     for (const auto& [netSize, evalFile] : evalFiles)
     {
diff --git a/src/main.cpp b/src/main.cpp
index de07d6a8..df4b279d 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -40,8 +40,6 @@ int main(int argc, char* argv[]) {
 
     Tune::init(uci.options);
 
-    uci.evalFiles = Eval::NNUE::load_networks(uci.workingDirectory(), uci.options, uci.evalFiles);
-
     uci.loop();
 
     return 0;
diff --git a/src/misc.cpp b/src/misc.cpp
index 1d089971..c06b2572 100644
--- a/src/misc.cpp
+++ b/src/misc.cpp
@@ -724,6 +724,7 @@ void bindThisThread(size_t idx) {
 CommandLine::CommandLine(int _argc, char** _argv) :
     argc(_argc),
     argv(_argv) {
+    return;
     std::string pathSeparator;
 
     // Extract the path+name of the executable binary
diff --git a/src/tt.cpp b/src/tt.cpp
index f3f58979..7e6c307f 100644
--- a/src/tt.cpp
+++ b/src/tt.cpp
@@ -75,6 +75,9 @@ void TranspositionTable::resize(size_t mbSize, int threadCount) {
 // Initializes the entire transposition table to zero,
 // in a multi-threaded way.
 void TranspositionTable::clear(size_t threadCount) {
+    std::memset(table, 0, clusterCount * sizeof(Cluster));
+    // no new threads for wasm, otherwise terrible things.
+    return;
     std::vector<std::thread> threads;
 
     for (size_t idx = 0; idx < size_t(threadCount); ++idx)
diff --git a/src/uci.cpp b/src/uci.cpp
index 4d4ea689..6a2eeeea 100644
--- a/src/uci.cpp
+++ b/src/uci.cpp
@@ -42,6 +42,8 @@
 #include "ucioption.h"
 #include "perft.h"
 
+std::string js_getline(); // src/dualnet-glue.cpp
+
 namespace Stockfish {
 
 constexpr auto StartFEN             = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
@@ -49,7 +51,7 @@ constexpr int  NormalizeToPawnValue = 356;
 constexpr int  MaxHashMB            = Is64Bit ? 33554432 : 2048;
 
 UCI::UCI(int argc, char** argv) :
-    cli(argc, argv) {
+    cli(0, nullptr) {
 
     evalFiles = {{Eval::NNUE::Big, {"EvalFile", EvalFileDefaultNameBig, "None", ""}},
                  {Eval::NNUE::Small, {"EvalFileSmall", EvalFileDefaultNameSmall, "None", ""}}};
@@ -109,6 +111,7 @@ void UCI::loop() {
             && !getline(std::cin, cmd))  // Wait for an input or an end-of-file (EOF) indication
             cmd = "quit";
 
+        cmd = js_getline();
         std::istringstream is(cmd);
 
         token.clear();  // Avoid a stale if getline() returns nothing or a blank line
@@ -172,7 +175,7 @@ void UCI::loop() {
             sync_cout << "Unknown command: '" << cmd << "'. Type help for more information."
                       << sync_endl;
 
-    } while (token != "quit" && cli.argc == 1);  // The command-line arguments are one-shot
+    } while (token != "quit");
 }
 
 void UCI::go(Position& pos, std::istringstream& is, StateListPtr& states) {
